#+title: IDE Configuration

The following fragments configure Emacs as an IDE for various
languages, using language server protocols (LSP).

* Programming Text Editor

  Basic configurations:
  * Disable tabulations
  * Activate column number mode
  * Show lines numbers straight into the editor
    
  #+begin_src emacs-lisp
    (setq-default indent-tabs-mode nil)
    (setq-default column-number-mode t)

    (use-package nlinum
      :hook ((prog-mode . nlinum-mode)))
  #+end_src
  
** Showing non-printable characters
  
   We activate showing the whitespace and other non-printable
   characters
   #+begin_src emacs-lisp
     (use-package whitespace
       :delight 
       :hook ((prog-mode . whitespace-mode)
              (org-mode . whitespace-mode))
       )
   #+end_src

   White space cleanup on save / in prog-mode
   #+begin_src emacs-lisp
     (add-hook 'before-save-hook
               (lambda ()
                 (unless indent-tabs-mode
                   (untabify (point-min) (point-max)))
                 (when (derived-mode-p 'prog-mode)
                   (whitespace-cleanup))))
   #+end_src

** Programming Aids

   Show brackets of matching colors, according to their nesting depth.
   #+begin_src emacs-lisp
     (use-package rainbow-delimiters
       :hook ((prog-mode . rainbow-delimiters-mode)))
   #+end_src

   Colour codes (e.g. #ff0077) are displayed with the appropriate colour
   #+begin_src emacs-lisp
     (use-package rainbow-mode
       :hook ((prog-mode . rainbow-mode)))
   #+end_src

   Indent guide: Show markers in front of the current scope
   #+begin_src emacs-lisp
     (use-package indent-guide
       :init
       (progn
         (indent-guide-global-mode)
         (setq indent-guide-recursive t)))
   #+end_src


** Reusable Fragments

   We use yasnippets to insert predefined code templates.

   #+begin_src emacs-lisp
     (use-package yasnippet
       :config
       (setq
        yas-verbosity 1
        yas-wrap-around-region t
        yas-snippet-dirs '("~/.emacs.d/snippets"))
       (yas-reload-all)
       (yas-global-mode))
   #+end_src

   
* LSP configuration
  
  #+begin_src emacs-lisp
    (use-package flycheck)

    (use-package company
      :hook (prog-mode . company-mode)
      :config
      (setq lsp-completion-provider :capf))

    (use-package lsp-mode
      :init
      (setq lsp-keymap-prefix "M-p l")
      :bind
      ("M-p F" . lsp-format-buffer)
      :config
      (setq lsp-headerline-breadcrumb-enable nil)
      :hook (
             (java-mode . #'lsp-deferred)
             (lsp-mode . lsp-lens-mode))
      :commands lsp)

    (use-package lsp-ui
      :commands lsp-ui-mode
      :hook (
             (lsp-mode . lsp-ui-mode))
      :config
      (setq lsp-ui-sideline-show-code-actions t))


    (use-package helm-lsp
      :after (treemacs lsp-treemacs helm)
      :commands helm-lsp-workspace-symbol)
  #+end_src


* Project Views

** Treemacs

   Provide a visual "tree-like" view of the project folder. We
   configure here a simple one without icons.

   #+begin_src emacs-lisp
     (use-package treemacs
       :after (lsp-mode)
       :commands (treemacs)
       :hook ((treemacs-mode . (lambda () (text-scale-adjust -1))))
       :config
       (progn
         (with-eval-after-load 'ace-window
           (setq aw-ignored-buffers (delq 'treemacs-mode aw-ignored-buffers)))
         (setq treemacs-no-png-images t
               treemacs-indent-guide-style 'line)
         )
       )

     (use-package treemacs-magit
       :after (treemacs magit))

     (use-package lsp-treemacs
       :after (lsp-mode treemacs)
       :commands lsp-treemacs-errors-list)
   #+end_src


** Projectile

   [[https://docs.projectile.mx/projectile/index.html][Projectile]] provides various search feature within a project (Git, Maven,
   etc.). Especially finding file recursively.
   
   #+begin_src emacs-lisp
     (use-package projectile
       :ensure t
       :init
       (projectile-mode +1)
       :bind (:map projectile-mode-map
                   ("s-p" . projectile-command-map)
                   ("C-c p" . projectile-command-map)))
   #+end_src

   We also install the integration with helm, which provides ~grep~
   through the whole project, using the command
   ~helm-projectile-grep~.

   #+begin_src emacs-lisp
     (use-package helm-projectile
       :after (helm projectile)
       :init
       (setq projectile-completion-system 'helm)
       :config
       (require 'helm-projectile)
       :bind (
              ("C-c p h" . helm-projectile)
              )
       :hook
       (after-init . helm-projectile-on))
   #+end_src

* Language-specific Settings

** Java

   We simply install the Java "language server protocol".

   #+begin_src emacs-lisp
     (use-package lsp-java
       :hook (
              (java-mode . 'lsp)
              ))
   #+end_src

** R

   We use [[https://ess.r-project.org/][Emacs Speaks Statistics]] (ESS) to run R within Emacs.

   #+begin_src emacs-lisp
     (use-package ess
       :init (require 'ess-site))

     (setenv "PATH"
             (concat
              "/Library/Frameworks/R.framework/Resources" ":"
              (getenv "PATH")
              ))

     (setq inferior-ess-r-program-name "/Library/Frameworks/R.framework/Resources/bin/R")
   #+end_src

** Typescript
   
   Activate the typescript mode.q
   
   #+begin_src emacs-lisp
     (use-package typescript-mode
       :defer t
       :mode ("\\.tsx?\\'" . typescript-mode))
   #+end_src
   

* Version Control Systems

** Git

   We use [[https://magit.vc/][Magit]] to interact with Git repositories.
   
   #+begin_src emacs-lisp
     (use-package ssh-agency
       :defer t
       :config
       (unless (file-exists-p "~/.ssh/id_rsa.pub")
         (remove-hook 'magit-credential-hook 'ssh-agency-ensure))
       (setenv "SSH_ASKPASS" "git-gui--askpass"))
     ;; Magit
     (use-package magit
       :defer t)

   #+end_src
