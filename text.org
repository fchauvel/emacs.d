#+title: Text Editor

* Basic Features

** Title Case

#+begin_src elisp
  (use-package titlecase
    :bind (("C-c t" . #'titlecase-line)))
#+end_src

#+RESULTS:
: titlecase-line

** Rectangle Selection

#+begin_src elisp
  (defun rectangle-yank-flatten (START END SEPARATOR)
    "Copy a rectangle of text from START to END and paste it as a
  single line distinguished by the given SEPARATOR."
    (interactive "r\nsSeparator: ")
    (letrec ((lines (extract-rectangle START END))
             (flatten (cl-reduce
                       (lambda (acc line) (concat acc SEPARATOR line))
                       lines)))
      (kill-new flatten)
      (deactivate-mark)))

  (global-set-key (kbd "C-x r C-f") 'rectangle-yank-flatten)
#+end_src

#+RESULTS:
: rectangle-yank-flatten

** Spell-Checking

On Linux, one can install ispell using ~apt-get install ispell~.

#+begin_src elisp
  (use-package flyspell
    :ensure t
    :defer t
   :init (setq ispell-program-name "/usr/bin/ispell")
   :hook
   (text-mode . turn-on-flyspell)
   (tex-mode . turn-on-flyspell)
   (prog-mode . flyspell-prog-mode))
#+end_src


* Markdown

#+begin_src elisp
  (use-package markdown-mode
    :mode (("\\.markdown$" . markdown-mode)
           ("\\.md$" . markdown-mode))
    :hook (markdown-mode-hook . (lambda ()
                                  (make-local-variable 'indent-tabs-mode)
                                  (setq indent-tabs-mode nil)
                                  (whitespace-mode)))
    :init (setq markdown-command "multimarkdown"))
#+end_src   

* Restructed Text (RST)

Package ~rst-mode~ is now built-in

* LaTeX

We use AucTeX to edit (La)TeX documents.

#+begin_src emacs-lisp
  (use-package auctex
    :defer t
    :mode ("\\.tex\\'" . LaTeX-mode)
    :hook ((LaTeX-mode . company-mode))
    :config
    (setq TeX-master "main.tex"
          reftex-plug-into-AUCTeX t
          TeX-parse-self t
          TeX-auto-save t))

  (use-package company-auctex
   :defer t
   :after (auctex)
   :init (company-auctex-init))
#+end_src

#+RESULTS:


** Bibliography Management

We expect the main BibTeX library to be available from
~~/references/references.bib~. On new machines, a link must be created.
  
#+begin_src emacs-lisp
  (require 'bibtex)
  (defvar fchauvel/bibtex-library "~/references/references.bib")
  (defvar fchauvel/pdf-library "~/references/pdf/")
#+end_src

#+RESULTS:
: fchauvel/pdf-library

Set some preference on how BibTeX generates keys and manage entries.

#+begin_src emacs-lisp
  (setq bibtex-autokey-year-length 4
        bibtex-maintain-sorted-entries t)
#+end_src

  
We use RefTeX to handle bibliography references.
  
#+begin_src emacs-lisp
  (use-package reftex
    :defer t
    :config
    (setq reftex-default-bibliography fchauvel/bibtex-library)
    :commands turn-on-reftex
    :hook ((LaTeX-mode  .  reftex-mode)
           (latex-mode  .  reftex-mode)))
#+end_src

#+RESULTS:
| reftex-mode |


With Company to get the right auto-completion.

#+begin_src emacs-lisp
  (use-package company-reftex
    :defer t
    :after (company)
    :init
    (setq company-bibtex-bibliography fchauvel/bibtex-library)
    :config
    (add-to-list 'company-backends 'company-reftex))

  (use-package company-bibtex
    :defer t
    :after (company)
    :config
    (add-to-list 'company-backends 'company-bibtex))
#+end_src


* Org-mode

  Use it a Wiki syntax to take notes and format simple documents

  Overall configuration

  #+begin_src emacs-lisp
    (defvar fchauvel/notes-library "~/notes")
  #+end_src

  #+RESULTS:
  : fchauvel/notes-library

** Running Code Fragments
   Configure how to run various code fragments

   #+begin_src emacs-lisp
     (org-babel-do-load-languages
      'org-babel-load-languages
      '((python . t)
        (C . t)
        (dot . t)
        (R . t)
        (ruby . t)
        (shell . t)
        (screen . t)
        (scheme . t)
        (sql . t)
        (js . t)
        (java . t)
        (ditaa . t)
        (restclient . t)))
   #+end_src

   #+RESULTS:

*** Typescript

#+begin_src elisp
  (use-package ob-typescript
    :ensure t
    :config
    (setq org-babel-command:typescript "tsc"))
#+end_src

#+RESULTS:
: t
   
*** R

    #+begin_src emacs-lisp
      (setq org-babel-R-command "/Library/Frameworks/R.framework/Resources/R --slave --no-save")
    #+end_src
    #+RESULTS:
    : /Library/Frameworks/R.framework/Resources/R --slave --no-save
   
*** Ditaa

    Extra configuration to configure Ditaa (ASCII diagrams)
  
    #+begin_src emacs-lisp
      (setq org-ditaa-jar-path "/opt/homebrew/Cellar/ditaa/0.11.0_1/libexec/ditaa.jar")
    #+end_src
   

** BibTeX References

   Use package ~org-ref~ to get my references available from BibTeX. We
   make it point to the ~fchauvel/bibtex-library~ variable (see their definitions
   in ~latex.org~).

   #+begin_src emacs-lisp
     (setq bibtex-completion-bibliography (list fchauvel/bibtex-library)
           bibtex-completion-library-path (list fchauvel/pdf-library)
           bibtex-completion-notes-path fchauvel/notes-library)

     (use-package helm-bibtex
       :after (helm))

     (use-package org-ref
       :after (helm-bibtex)
       :config
       (progn
         (require 'bibtex)
         (require 'org-ref-helm)))
  #+end_src

  #+RESULTS:
  

** Export to PDF / LaTeX

   We use the LaTeX package ~minted~ to colorize code fragments
   
  #+begin_src emacs-lisp
    (setq org-latex-listings 'minted
          org-latex-packages-alist '(("" "minted"))
          org-latex-pdf-process
          '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
            "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
            "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
  #+end_src
  

** Org-roam

See use it to take notes about various things:

See the defintion of ~fchauvel/notes-library~ at the top of this
file.

#+begin_src elisp
  (use-package org-roam
    :hook
    (after-init . org-roam-mode)
    :custom
    (org-roam-directory fchauvel/notes-library)
    (org-roam-db-location (concat fchauvel/notes-library "/org-roam.db"))
    (org-roam-index-file (concat fchauvel/notes-library "/index.org"))
    (org-roam-db-update-method 'immediate)
    :bind (("C-c n l" . org-roam)
           ("C-c n f" . org-roam-node-find)
           ("C-c n g" . org-roam-graph)
           ("C-c n i" . org-roam-insert)
           ("C-c n I" . org-roam-insert-immediate))
    :config
    (org-roam-setup))
#+end_src

#+RESULTS:
: org-roam-insert-immediate





